//-----------Test-Logs------------//
//问题:
//    编码格式问题:
//        从GB18030改为UTF-8
//    QueueTraverse函数判断条件刚好写反了:
//        添加了一个'!'
//    QueueTraverse不能遍历到rear元素;(潜在问题:Queue空也会遍历;i+1可能胡超出范围)
//        把循环判断条件改为i != Q->rear
//改动:
//    为了测试输出数量不太多,把MAXQSIZE改小为4
//-------The-End-of-Test-Logs-----//

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

//----------|Status|-----------
typedef int Status;
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2
//-----------------------------
//---------|Typedef|-----------
#define MAXQSIZE 10
typedef int QElemType; //循环队列存储的数据类型
typedef struct SqQueue_struct
{
	QElemType *base;        //初始化的动态分配存储空间
	int front;              //头指针，若队列不空，指向队列头元素
	int rear;               //尾指针，若队列不空，指向队列尾元素的下一个位置
}*SqQueue;
//-----------------------------
//定义的新的变量类型首字母大写----------------------

//---------|FuncList|----------
Status InitQueue(SqQueue Q);
// 构造一个空循环队列Q
Status DestoryQueue(SqQueue Q);
// 销毁循环队列Q，Q不再存在
Status ClearQueue(SqQueue Q);
// 将Q清为空循环队列
Status  QueueEmpty(SqQueue Q);
// 若循环队列Q为空队列，则返回TRUE，否则返回FALSE
int QueueLength(SqQueue Q);
// 返回Q的元素个数，即为循环队列的长度
Status Gethead(SqQueue Q, QElemType *e);
// 若循环队列不空，则用e返回Q的队头元素，并返回OK；否则返回ERROR
Status EnQueue(SqQueue Q, QElemType e);
// 插入元素e为Q的新的队尾元素
Status DeQueue(SqQueue Q, QElemType *e);
// 若循环队列不空，则删除Q的队头元素，并用e返回其值，并返回OK；否则返回ERROR
Status visit(QElemType *e);
// visit一个元素
Status QueueTraverse(SqQueue Q, Status(*visit)(QElemType *));
// 从队头到队尾依次对队列Q中每个元素调用函数visit（）。一旦visit失败，则操作失败
//-----------------------------

//---------Test----------//

//------Private-Func-for-testing-------//
Status _sqr(QElemType *Q)//square
{
	*Q *= *Q;
	return OK;
}
Status _print(QElemType *Q)
{
	QElemType temp = *Q;
	printf("%d\n", temp);
	return OK;
}
//-The-End-of-Private-Func-for-testing-//

int main()
{
	struct SqQueue_struct q4t;        //declare a queue for testing use
	QElemType e4t;                    //declare an element for testing use
	printf("InitQueue:    %d\n", InitQueue(&q4t));
	printf("QueueEmpty:   %d\n", QueueEmpty(&q4t));
	printf("QueueTraverse:%d\n", QueueTraverse(&q4t, _print));
	printf("Gethead:      %d\n", Gethead(&q4t, &e4t));
	printf("The head is   %d\n", e4t);
	printf("QueueLength:  %d\n", QueueLength(&q4t));
	for (int i = -MAXQSIZE / 2; i<MAXQSIZE / 2 - 1; i++)
		EnQueue(&q4t, i);
	printf("EnQueue:      %d\n", EnQueue(&q4t, 1));
	printf("QueueTraverse:%d\n", QueueTraverse(&q4t, _sqr));
	printf("QueueTraverse:%d\n", QueueTraverse(&q4t, _print));
	printf("Gethead:      %d\n", Gethead(&q4t, &e4t));
	printf("The head is   %d\n", e4t);
	printf("QueueLength:  %d\n", QueueLength(&q4t));
	for (int i = 0; i<MAXQSIZE / 2; i++)
	{
		DeQueue(&q4t, &e4t);
		printf("DeQueue:      %d\n", e4t);
	}
	printf("QueueTraverse:%d\n", QueueTraverse(&q4t, _print));
	printf("QueueLength:  %d\n", QueueLength(&q4t));
	for (int i = 0; i>-MAXQSIZE / 2; i--)
		EnQueue(&q4t, i);
	printf("QueueTraverse:%d\n", QueueTraverse(&q4t, _print));

	printf("ClearQueue:   %d\n", ClearQueue(&q4t));
	printf("QueueLength:  %d\n", QueueLength(&q4t));
	printf("DeQueue:      %d\n", DeQueue(&q4t, &e4t));

	return 0;
}
//----The-End-of-Test-----//

//-----------------------------
Status InitQueue(SqQueue Q)
{
	Q->base = (QElemType *)malloc(MAXQSIZE * sizeof(QElemType));
	if (!(Q->base))
		exit(OVERFLOW);
	Q->front = 0;
	Q->rear = 0;
	return OK;
}
// 构造一个空循环队列Q
Status DestoryQueue(SqQueue Q)
{
	free(Q->base);
	free(Q);
	return OK;
}
// 销毁循环队列Q，Q不再存在
Status ClearQueue(SqQueue Q)
{
	free(Q->base);
	Q->base = (QElemType *)malloc(MAXQSIZE * sizeof(QElemType));
	if (!(Q->base))
		exit(OVERFLOW);
	Q->front = 0;
	Q->rear = 0;
	return OK;
}
// 将Q清为空循环队列
Status  QueueEmpty(SqQueue Q)
{
	if (!(Q->base))
		exit(OVERFLOW);
	else if (Q->front == Q->rear)
		return TRUE;
	else
		return FALSE;
}
// 若循环队列Q为空队列，则返回TRUE，否则返回FALSE
int QueueLength(SqQueue Q)
{
	return (Q->rear - Q->front + MAXQSIZE) % MAXQSIZE;
}
// 返回Q的元素个数，即为循环队列的长度
Status Gethead(SqQueue Q, QElemType *e)
{
	if (Q->front == Q->rear)
		return ERROR;
	else
	{
		*e = Q->base[Q->front];
		return OK;
	}
}
// 若循环队列不空，则用e返回Q的队头元素，并返回OK；否则返回ERROR
Status EnQueue(SqQueue Q, QElemType e)
{
	if ((Q->rear + 1) % MAXQSIZE == Q->front)               //队列满
		return ERROR;
	Q->base[Q->rear] = e;
	Q->rear = (Q->rear + 1) % MAXQSIZE;
	return OK;
}
// 插入元素e为Q的新的队尾元素
Status DeQueue(SqQueue Q, QElemType *e)
{
	if (Q->front == Q->rear)
		return ERROR;
	*e = Q->base[Q->front];
	Q->front = (Q->front + 1) % MAXQSIZE;
	return OK;
}
// 若循环队列不空，则删除Q的队头元素，并用e返回其值，并返回OK；否则返回ERROR
Status visit(QElemType *e)
{
	if (!e)
		return ERROR;
	else
		return OK;
}
// visit一个元素
Status QueueTraverse(SqQueue Q, Status(*visit)(QElemType *))
{
	int i;
	for (i = Q->front; i != Q->rear; i = (i + 1) % MAXQSIZE)
	{
		if (!visit(&(Q->base[i])))
			return ERROR;
	}
	return OK;
}
// 从队头到队尾依次对队列Q中每个元素调用函数visit（）。一旦visit失败，则操作失败
